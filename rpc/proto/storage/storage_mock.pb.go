// Code generated by MockGen. DO NOT EDIT.
// Source: ./proto/storage/storage.pb.go

// Package storage is a generated GoMock package.
package storage

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockisWriteResponse_Seq is a mock of isWriteResponse_Seq interface
type MockisWriteResponse_Seq struct {
	ctrl     *gomock.Controller
	recorder *MockisWriteResponse_SeqMockRecorder
}

// MockisWriteResponse_SeqMockRecorder is the mock recorder for MockisWriteResponse_Seq
type MockisWriteResponse_SeqMockRecorder struct {
	mock *MockisWriteResponse_Seq
}

// NewMockisWriteResponse_Seq creates a new mock instance
func NewMockisWriteResponse_Seq(ctrl *gomock.Controller) *MockisWriteResponse_Seq {
	mock := &MockisWriteResponse_Seq{ctrl: ctrl}
	mock.recorder = &MockisWriteResponse_SeqMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisWriteResponse_Seq) EXPECT() *MockisWriteResponse_SeqMockRecorder {
	return m.recorder
}

// isWriteResponse_Seq mocks base method
func (m *MockisWriteResponse_Seq) isWriteResponse_Seq() {
	m.ctrl.Call(m, "isWriteResponse_Seq")
}

// isWriteResponse_Seq indicates an expected call of isWriteResponse_Seq
func (mr *MockisWriteResponse_SeqMockRecorder) isWriteResponse_Seq() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isWriteResponse_Seq", reflect.TypeOf((*MockisWriteResponse_Seq)(nil).isWriteResponse_Seq))
}

// MarshalTo mocks base method
func (m *MockisWriteResponse_Seq) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisWriteResponse_SeqMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisWriteResponse_Seq)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisWriteResponse_Seq) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisWriteResponse_SeqMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisWriteResponse_Seq)(nil).Size))
}

// MockWriteServiceClient is a mock of WriteServiceClient interface
type MockWriteServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockWriteServiceClientMockRecorder
}

// MockWriteServiceClientMockRecorder is the mock recorder for MockWriteServiceClient
type MockWriteServiceClientMockRecorder struct {
	mock *MockWriteServiceClient
}

// NewMockWriteServiceClient creates a new mock instance
func NewMockWriteServiceClient(ctrl *gomock.Controller) *MockWriteServiceClient {
	mock := &MockWriteServiceClient{ctrl: ctrl}
	mock.recorder = &MockWriteServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWriteServiceClient) EXPECT() *MockWriteServiceClientMockRecorder {
	return m.recorder
}

// Write mocks base method
func (m *MockWriteServiceClient) Write(ctx context.Context, opts ...grpc.CallOption) (WriteService_WriteClient, error) {
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Write", varargs...)
	ret0, _ := ret[0].(WriteService_WriteClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockWriteServiceClientMockRecorder) Write(ctx interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockWriteServiceClient)(nil).Write), varargs...)
}

// MockWriteService_WriteClient is a mock of WriteService_WriteClient interface
type MockWriteService_WriteClient struct {
	ctrl     *gomock.Controller
	recorder *MockWriteService_WriteClientMockRecorder
}

// MockWriteService_WriteClientMockRecorder is the mock recorder for MockWriteService_WriteClient
type MockWriteService_WriteClientMockRecorder struct {
	mock *MockWriteService_WriteClient
}

// NewMockWriteService_WriteClient creates a new mock instance
func NewMockWriteService_WriteClient(ctrl *gomock.Controller) *MockWriteService_WriteClient {
	mock := &MockWriteService_WriteClient{ctrl: ctrl}
	mock.recorder = &MockWriteService_WriteClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWriteService_WriteClient) EXPECT() *MockWriteService_WriteClientMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockWriteService_WriteClient) Send(arg0 *WriteRequest) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockWriteService_WriteClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockWriteService_WriteClient)(nil).Send), arg0)
}

// Recv mocks base method
func (m *MockWriteService_WriteClient) Recv() (*WriteResponse, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*WriteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockWriteService_WriteClientMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockWriteService_WriteClient)(nil).Recv))
}

// Header mocks base method
func (m *MockWriteService_WriteClient) Header() (metadata.MD, error) {
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockWriteService_WriteClientMockRecorder) Header() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockWriteService_WriteClient)(nil).Header))
}

// Trailer mocks base method
func (m *MockWriteService_WriteClient) Trailer() metadata.MD {
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockWriteService_WriteClientMockRecorder) Trailer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockWriteService_WriteClient)(nil).Trailer))
}

// CloseSend mocks base method
func (m *MockWriteService_WriteClient) CloseSend() error {
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockWriteService_WriteClientMockRecorder) CloseSend() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockWriteService_WriteClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockWriteService_WriteClient) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockWriteService_WriteClientMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockWriteService_WriteClient)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockWriteService_WriteClient) SendMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockWriteService_WriteClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockWriteService_WriteClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockWriteService_WriteClient) RecvMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockWriteService_WriteClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockWriteService_WriteClient)(nil).RecvMsg), m)
}

// MockWriteServiceServer is a mock of WriteServiceServer interface
type MockWriteServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockWriteServiceServerMockRecorder
}

// MockWriteServiceServerMockRecorder is the mock recorder for MockWriteServiceServer
type MockWriteServiceServerMockRecorder struct {
	mock *MockWriteServiceServer
}

// NewMockWriteServiceServer creates a new mock instance
func NewMockWriteServiceServer(ctrl *gomock.Controller) *MockWriteServiceServer {
	mock := &MockWriteServiceServer{ctrl: ctrl}
	mock.recorder = &MockWriteServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWriteServiceServer) EXPECT() *MockWriteServiceServerMockRecorder {
	return m.recorder
}

// Write mocks base method
func (m *MockWriteServiceServer) Write(arg0 WriteService_WriteServer) error {
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockWriteServiceServerMockRecorder) Write(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockWriteServiceServer)(nil).Write), arg0)
}

// MockWriteService_WriteServer is a mock of WriteService_WriteServer interface
type MockWriteService_WriteServer struct {
	ctrl     *gomock.Controller
	recorder *MockWriteService_WriteServerMockRecorder
}

// MockWriteService_WriteServerMockRecorder is the mock recorder for MockWriteService_WriteServer
type MockWriteService_WriteServerMockRecorder struct {
	mock *MockWriteService_WriteServer
}

// NewMockWriteService_WriteServer creates a new mock instance
func NewMockWriteService_WriteServer(ctrl *gomock.Controller) *MockWriteService_WriteServer {
	mock := &MockWriteService_WriteServer{ctrl: ctrl}
	mock.recorder = &MockWriteService_WriteServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWriteService_WriteServer) EXPECT() *MockWriteService_WriteServerMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockWriteService_WriteServer) Send(arg0 *WriteResponse) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockWriteService_WriteServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockWriteService_WriteServer)(nil).Send), arg0)
}

// Recv mocks base method
func (m *MockWriteService_WriteServer) Recv() (*WriteRequest, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*WriteRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockWriteService_WriteServerMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockWriteService_WriteServer)(nil).Recv))
}

// SetHeader mocks base method
func (m *MockWriteService_WriteServer) SetHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockWriteService_WriteServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockWriteService_WriteServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method
func (m *MockWriteService_WriteServer) SendHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockWriteService_WriteServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockWriteService_WriteServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockWriteService_WriteServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockWriteService_WriteServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockWriteService_WriteServer)(nil).SetTrailer), arg0)
}

// Context mocks base method
func (m *MockWriteService_WriteServer) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockWriteService_WriteServerMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockWriteService_WriteServer)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockWriteService_WriteServer) SendMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockWriteService_WriteServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockWriteService_WriteServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockWriteService_WriteServer) RecvMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockWriteService_WriteServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockWriteService_WriteServer)(nil).RecvMsg), m)
}

// MockQueryServiceClient is a mock of QueryServiceClient interface
type MockQueryServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockQueryServiceClientMockRecorder
}

// MockQueryServiceClientMockRecorder is the mock recorder for MockQueryServiceClient
type MockQueryServiceClientMockRecorder struct {
	mock *MockQueryServiceClient
}

// NewMockQueryServiceClient creates a new mock instance
func NewMockQueryServiceClient(ctrl *gomock.Controller) *MockQueryServiceClient {
	mock := &MockQueryServiceClient{ctrl: ctrl}
	mock.recorder = &MockQueryServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQueryServiceClient) EXPECT() *MockQueryServiceClientMockRecorder {
	return m.recorder
}

// Query mocks base method
func (m *MockQueryServiceClient) Query(ctx context.Context, opts ...grpc.CallOption) (QueryService_QueryClient, error) {
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(QueryService_QueryClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockQueryServiceClientMockRecorder) Query(ctx interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockQueryServiceClient)(nil).Query), varargs...)
}

// MockQueryService_QueryClient is a mock of QueryService_QueryClient interface
type MockQueryService_QueryClient struct {
	ctrl     *gomock.Controller
	recorder *MockQueryService_QueryClientMockRecorder
}

// MockQueryService_QueryClientMockRecorder is the mock recorder for MockQueryService_QueryClient
type MockQueryService_QueryClientMockRecorder struct {
	mock *MockQueryService_QueryClient
}

// NewMockQueryService_QueryClient creates a new mock instance
func NewMockQueryService_QueryClient(ctrl *gomock.Controller) *MockQueryService_QueryClient {
	mock := &MockQueryService_QueryClient{ctrl: ctrl}
	mock.recorder = &MockQueryService_QueryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQueryService_QueryClient) EXPECT() *MockQueryService_QueryClientMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockQueryService_QueryClient) Send(arg0 *QueryRequest) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockQueryService_QueryClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockQueryService_QueryClient)(nil).Send), arg0)
}

// Recv mocks base method
func (m *MockQueryService_QueryClient) Recv() (*QueryResponse, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*QueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockQueryService_QueryClientMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockQueryService_QueryClient)(nil).Recv))
}

// Header mocks base method
func (m *MockQueryService_QueryClient) Header() (metadata.MD, error) {
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockQueryService_QueryClientMockRecorder) Header() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockQueryService_QueryClient)(nil).Header))
}

// Trailer mocks base method
func (m *MockQueryService_QueryClient) Trailer() metadata.MD {
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockQueryService_QueryClientMockRecorder) Trailer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockQueryService_QueryClient)(nil).Trailer))
}

// CloseSend mocks base method
func (m *MockQueryService_QueryClient) CloseSend() error {
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockQueryService_QueryClientMockRecorder) CloseSend() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockQueryService_QueryClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockQueryService_QueryClient) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockQueryService_QueryClientMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockQueryService_QueryClient)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockQueryService_QueryClient) SendMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockQueryService_QueryClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockQueryService_QueryClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockQueryService_QueryClient) RecvMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockQueryService_QueryClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockQueryService_QueryClient)(nil).RecvMsg), m)
}

// MockQueryServiceServer is a mock of QueryServiceServer interface
type MockQueryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockQueryServiceServerMockRecorder
}

// MockQueryServiceServerMockRecorder is the mock recorder for MockQueryServiceServer
type MockQueryServiceServerMockRecorder struct {
	mock *MockQueryServiceServer
}

// NewMockQueryServiceServer creates a new mock instance
func NewMockQueryServiceServer(ctrl *gomock.Controller) *MockQueryServiceServer {
	mock := &MockQueryServiceServer{ctrl: ctrl}
	mock.recorder = &MockQueryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQueryServiceServer) EXPECT() *MockQueryServiceServerMockRecorder {
	return m.recorder
}

// Query mocks base method
func (m *MockQueryServiceServer) Query(arg0 QueryService_QueryServer) error {
	ret := m.ctrl.Call(m, "Query", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Query indicates an expected call of Query
func (mr *MockQueryServiceServerMockRecorder) Query(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockQueryServiceServer)(nil).Query), arg0)
}

// MockQueryService_QueryServer is a mock of QueryService_QueryServer interface
type MockQueryService_QueryServer struct {
	ctrl     *gomock.Controller
	recorder *MockQueryService_QueryServerMockRecorder
}

// MockQueryService_QueryServerMockRecorder is the mock recorder for MockQueryService_QueryServer
type MockQueryService_QueryServerMockRecorder struct {
	mock *MockQueryService_QueryServer
}

// NewMockQueryService_QueryServer creates a new mock instance
func NewMockQueryService_QueryServer(ctrl *gomock.Controller) *MockQueryService_QueryServer {
	mock := &MockQueryService_QueryServer{ctrl: ctrl}
	mock.recorder = &MockQueryService_QueryServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQueryService_QueryServer) EXPECT() *MockQueryService_QueryServerMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockQueryService_QueryServer) Send(arg0 *QueryResponse) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockQueryService_QueryServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockQueryService_QueryServer)(nil).Send), arg0)
}

// Recv mocks base method
func (m *MockQueryService_QueryServer) Recv() (*QueryRequest, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*QueryRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockQueryService_QueryServerMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockQueryService_QueryServer)(nil).Recv))
}

// SetHeader mocks base method
func (m *MockQueryService_QueryServer) SetHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockQueryService_QueryServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockQueryService_QueryServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method
func (m *MockQueryService_QueryServer) SendHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockQueryService_QueryServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockQueryService_QueryServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockQueryService_QueryServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockQueryService_QueryServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockQueryService_QueryServer)(nil).SetTrailer), arg0)
}

// Context mocks base method
func (m *MockQueryService_QueryServer) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockQueryService_QueryServerMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockQueryService_QueryServer)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockQueryService_QueryServer) SendMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockQueryService_QueryServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockQueryService_QueryServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockQueryService_QueryServer) RecvMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockQueryService_QueryServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockQueryService_QueryServer)(nil).RecvMsg), m)
}
